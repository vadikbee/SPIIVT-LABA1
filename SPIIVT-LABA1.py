import streamlit as st
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

# ==============================================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç–∏–ª–µ–π
# ==============================================================================
st.set_page_config(layout="wide", page_title="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –ø–æ –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–µ")

st.title("üî¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –ù–µ—á–µ—Ç–∫–∞—è –ª–æ–≥–∏–∫–∞")
st.write("""
–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.
""")

# ==============================================================================
# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
# ==============================================================================
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã:",
                        ["–í–≤–µ–¥–µ–Ω–∏–µ",
                         "–ß–∞—Å—Ç—å 1: –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏",
                         "–ß–∞—Å—Ç—å 2: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–µ—á–µ—Ç–∫–∏–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏",
                         "–ß–∞—Å—Ç—å 3: –ù–µ—á–µ—Ç–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞"])

# ==============================================================================
# –†–∞–∑–¥–µ–ª: –í–≤–µ–¥–µ–Ω–∏–µ
# ==============================================================================
if page == "–í–≤–µ–¥–µ–Ω–∏–µ":
    st.header("–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã")
    st.markdown("""
    - –ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –Ω–µ—á—ë—Ç–∫–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.
    - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –∑–∞–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –∏—Ö —Å—Ç—Ä–æ–∏—Ç—å.
    - –ò–∑—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–µ—á—ë—Ç–∫–∏—Ö –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º.

    –í —ç—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.
    """)
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Fuzzy_logic_temperature.svg/500px-Fuzzy_logic_temperature.svg.png",
             caption="–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'", width=500)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 1: –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
# ==============================================================================
elif page == "–ß–∞—Å—Ç—å 1: –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏":
    st.header("–ß–∞—Å—Ç—å 1: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ (–§–ü)")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é —Å–ª–∞–π–¥–µ—Ä–æ–≤.")

    func_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –§–ü:",
                             ["–¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è (trimf)", "–¢—Ä–∞–ø–µ—Ü–∏–µ–≤–∏–¥–Ω–∞—è (trapmf)",
                              "–ì–∞—É—Å—Å–æ–≤–∞ (gaussmf)", "–û–±–æ–±—â–µ–Ω–Ω—ã–π –∫–æ–ª–æ–∫–æ–ª (gbellmf)",
                              "–°–∏–≥–º–æ–∏–¥–Ω–∞—è (sigmf)", "Z-–æ–±—Ä–∞–∑–Ω–∞—è (zmf)", "S-–æ–±—Ä–∞–∑–Ω–∞—è (smf)"])

    fig, ax = plt.subplots()
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    x = np.arange(0, 25.1, 0.1)

    if func_type == "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è (trimf)":
        st.subheader("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –§–ü: `fuzz.trimf(x, [a, b, c])`")
        col1, col2, col3 = st.columns(3)
        with col1:
            a = st.slider("–ü–∞—Ä–∞–º–µ—Ç—Ä 'a' (–ª–µ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ):", 0.0, 25.0, 5.0)
        with col2:
            b = st.slider("–ü–∞—Ä–∞–º–µ—Ç—Ä 'b' (–≤–µ—Ä—à–∏–Ω–∞):", 0.0, 25.0, 10.0)
        with col3:
            c = st.slider("–ü–∞—Ä–∞–º–µ—Ç—Ä 'c' (–ø—Ä–∞–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ):", 0.0, 25.0, 15.0)
        
        params = [a, b, c]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not (a <= b <= c):
            st.error("–û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å —É—Å–ª–æ–≤–∏—é a <= b <= c.")
            y = np.zeros_like(x) # –†–∏—Å—É–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        else:
            y = fuzz.trimf(x, params)
        
        ax.plot(x, y, 'b', linewidth=2)
        ax.set_title(f"trimf —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")

    elif func_type == "–¢—Ä–∞–ø–µ—Ü–∏–µ–≤–∏–¥–Ω–∞—è (trapmf)":
        st.subheader("–¢—Ä–∞–ø–µ—Ü–∏–µ–≤–∏–¥–Ω–∞—è –§–ü: `fuzz.trapmf(x, [a, b, c, d])`")
        base_params = st.slider("–û—Å–Ω–æ–≤–∞–Ω–∏–µ [a, d]:", 0.0, 25.0, (3.0, 22.0))
        top_params = st.slider("–í–µ—Ä—à–∏–Ω–∞ [b, c]:", 0.0, 25.0, (8.0, 15.0))
        
        a, d = base_params
        b, c = top_params

        params = [a, b, c, d]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not (a <= b <= c <= d):
            st.error("–û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å —É—Å–ª–æ–≤–∏—é a <= b <= c <= d.")
            y = np.zeros_like(x) # –†–∏—Å—É–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        else:
            y = fuzz.trapmf(x, params)
            
        ax.plot(x, y, 'g', linewidth=2)
        ax.set_title(f"trapmf —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")

    elif func_type == "–ì–∞—É—Å—Å–æ–≤–∞ (gaussmf)":
        st.subheader("–ì–∞—É—Å—Å–æ–≤–∞ –§–ü: `fuzz.gaussmf(x, mean, sigma)`")
        mean = st.slider("–¶–µ–Ω—Ç—Ä (mean):", 0.0, 25.0, 12.0)
        sigma = st.slider("–®–∏—Ä–∏–Ω–∞ (sigma):", 0.1, 10.0, 2.0)
        y = fuzz.gaussmf(x, mean, sigma)
        ax.plot(x, y, 'r', linewidth=2)
        ax.set_title(f"gaussmf —Å —Ü–µ–Ω—Ç—Ä–æ–º={mean}, —à–∏—Ä–∏–Ω–æ–π={sigma}")

    elif func_type == "–û–±–æ–±—â–µ–Ω–Ω—ã–π –∫–æ–ª–æ–∫–æ–ª (gbellmf)":
        st.subheader("–§–ü '–û–±–æ–±—â–µ–Ω–Ω—ã–π –∫–æ–ª–æ–∫–æ–ª': `fuzz.gbellmf(x, a, b, c)`")
        a = st.slider("–®–∏—Ä–∏–Ω–∞ (a):", 0.1, 10.0, 2.0)
        b = st.slider("–ù–∞–∫–ª–æ–Ω (b):", 0.1, 10.0, 4.0)
        c = st.slider("–¶–µ–Ω—Ç—Ä (c):", 0.0, 25.0, 12.0)
        y = fuzz.gbellmf(x, a, b, c)
        ax.plot(x, y, 'm', linewidth=2)
        ax.set_title(f"gbellmf —Å a={a}, b={b}, c={c}")

    elif func_type == "–°–∏–≥–º–æ–∏–¥–Ω–∞—è (sigmf)":
        st.subheader("–°–∏–≥–º–æ–∏–¥–Ω–∞—è –§–ü: `fuzz.sigmf(x, center, slope)`")
        center = st.slider("–¶–µ–Ω—Ç—Ä (center):", 0.0, 25.0, 12.0)
        slope = st.slider("–ù–∞–∫–ª–æ–Ω (slope):", -10.0, 10.0, 1.0)
        y = fuzz.sigmf(x, center, slope)
        ax.plot(x, y, 'c', linewidth=2)
        ax.set_title(f"sigmf —Å —Ü–µ–Ω—Ç—Ä–æ–º={center}, –Ω–∞–∫–ª–æ–Ω–æ–º={slope}")

    elif func_type == "Z-–æ–±—Ä–∞–∑–Ω–∞—è (zmf)":
        st.subheader("Z-–æ–±—Ä–∞–∑–Ω–∞—è –§–ü: `fuzz.zmf(x, a, b)`")
        params = st.slider("–¢–æ—á–∫–∏ —Å–ø–∞–¥–∞ [a, b]:", 0.0, 25.0, (5.0, 15.0))
        y = fuzz.zmf(x, params[0], params[1])
        ax.plot(x, y, 'y', linewidth=2)
        ax.set_title(f"zmf —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
        
    elif func_type == "S-–æ–±—Ä–∞–∑–Ω–∞—è (smf)":
        st.subheader("S-–æ–±—Ä–∞–∑–Ω–∞—è –§–ü: `fuzz.smf(x, a, b)`")
        params = st.slider("–¢–æ—á–∫–∏ –ø–æ–¥—ä–µ–º–∞ [a, b]:", 0.0, 25.0, (5.0, 15.0))
        y = fuzz.smf(x, params[0], params[1])
        ax.plot(x, y, 'k', linewidth=2)
        ax.set_title(f"smf —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")

    ax.grid(True)
    ax.set_ylim(-0.05, 1.05)
    ax.set_xlim(0, 25)
    st.pyplot(fig)


# ==============================================================================
# –†–∞–∑–¥–µ–ª 2: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–µ—á–µ—Ç–∫–∏–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
# ==============================================================================
elif page == "–ß–∞—Å—Ç—å 2: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–µ—á–µ—Ç–∫–∏–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏":
    st.header("–ß–∞—Å—Ç—å 2: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–µ—á–µ—Ç–∫–∏–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏")
    st.markdown("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤–∞ –Ω–µ—á–µ—Ç–∫–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (A –∏ B) –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ –Ω–∏–º–∏.")

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ A (–ì–∞—É—Å—Å–æ–≤–∞ –§–ü)")
        mean_a = st.slider("–¶–µ–Ω—Ç—Ä A:", 0.0, 20.0, 12.0)
        sigma_a = st.slider("–®–∏—Ä–∏–Ω–∞ A:", 0.1, 10.0, 2.0)

    with col2:
        st.subheader("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ B (–ì–∞—É—Å—Å–æ–≤–∞ –§–ü)")
        mean_b = st.slider("–¶–µ–Ω—Ç—Ä B:", 0.0, 20.0, 8.0)
        sigma_b = st.slider("–®–∏—Ä–∏–Ω–∞ B:", 0.1, 10.0, 3.0)

    x = np.arange(0, 20.1, 0.1)
    A = fuzz.gaussmf(x, mean_a, sigma_a)
    B = fuzz.gaussmf(x, mean_b, sigma_b)

    # –û–ø–µ—Ä–∞—Ü–∏–∏
    intersect_min = np.fmin(A, B)
    union_max = np.fmax(A, B)
    complement_A = 1 - A
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π")
    fig, ((ax0, ax1), (ax2, ax3)) = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))

    # –ò—Å—Ö–æ–¥–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    ax0.plot(x, A, 'b', linewidth=1.5, label='–ú–Ω–æ–∂–µ—Å—Ç–≤–æ A')
    ax0.plot(x, B, 'g', linewidth=1.5, label='–ú–Ω–æ–∂–µ—Å—Ç–≤–æ B')
    ax0.set_title("–ò—Å—Ö–æ–¥–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞")
    ax0.legend()
    ax0.grid(True)

    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (AND)
    ax1.fill_between(x, 0, intersect_min, facecolor='orange', alpha=0.7)
    ax1.plot(x, A, 'b:', linewidth=1)
    ax1.plot(x, B, 'g:', linewidth=1)
    ax1.set_title("–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (min(A, B))")
    ax1.grid(True)

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (OR)
    ax2.fill_between(x, 0, union_max, facecolor='cyan', alpha=0.7)
    ax2.plot(x, A, 'b:', linewidth=1)
    ax2.plot(x, B, 'g:', linewidth=1)
    ax2.set_title("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (max(A, B))")
    ax2.grid(True)
    
    # –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (NOT)
    ax3.plot(x, A, 'b:', linewidth=1, label='–ú–Ω–æ–∂–µ—Å—Ç–≤–æ A')
    ax3.fill_between(x, 0, complement_A, facecolor='red', alpha=0.7, label='–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ A')
    ax3.set_title("–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (1 - A)")
    ax3.legend()
    ax3.grid(True)

    for ax_ in fig.get_axes():
        ax_.set_ylim(-0.05, 1.05)

    plt.tight_layout()
    st.pyplot(fig)


# ==============================================================================
# –†–∞–∑–¥–µ–ª 3: –ù–µ—á–µ—Ç–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞
# ==============================================================================
elif page == "–ß–∞—Å—Ç—å 3: –ù–µ—á–µ—Ç–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞":
    st.header("–ß–∞—Å—Ç—å 3: –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ `y = x^2`")
    st.markdown("""
    –ó–¥–µ—Å—å –º—ã —Å—Ç—Ä–æ–∏–º –Ω–µ—á–µ—Ç–∫—É—é —Å–∏—Å—Ç–µ–º—É (FIS) –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ `y = x^2` –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ `[-1, 1]`.
    –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 5 –ø—Ä–∞–≤–∏–ª, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 1 –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """)

    # --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ---
    @st.cache_data
    def create_fis(sigma):
        x_input = ctrl.Antecedent(np.arange(-1, 1.01, 0.01), 'x')
        y_output = ctrl.Consequent(np.arange(0, 1.01, 0.01), 'y')
        
        x_input['bn'] = fuzz.gaussmf(x_input.universe, -1.0, sigma)
        x_input['n']  = fuzz.gaussmf(x_input.universe, -0.6, sigma)
        x_input['z']  = fuzz.gaussmf(x_input.universe,  0.0, sigma)
        x_input['p']  = fuzz.gaussmf(x_input.universe,  0.4, sigma)
        x_input['pb'] = fuzz.gaussmf(x_input.universe,  1.0, sigma)

        y_output['level_1']    = fuzz.trimf(y_output.universe, [1.0, 1.0, 1.0])
        y_output['level_036']  = fuzz.trimf(y_output.universe, [0.36, 0.36, 0.36])
        y_output['level_0']    = fuzz.trimf(y_output.universe, [0, 0, 0])
        y_output['level_016']  = fuzz.trimf(y_output.universe, [0.16, 0.16, 0.16])
        
        rule1 = ctrl.Rule(x_input['bn'], y_output['level_1'])
        rule2 = ctrl.Rule(x_input['n'],  y_output['level_036'])
        rule3 = ctrl.Rule(x_input['z'],  y_output['level_0'])
        rule4 = ctrl.Rule(x_input['p'],  y_output['level_016'])
        rule5 = ctrl.Rule(x_input['pb'], y_output['level_1'])
        
        fis_control = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5])
        return fis_control, x_input

    # --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
    st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã")
    sigma = st.sidebar.slider("–®–∏—Ä–∏–Ω–∞ (sigma) –¥–ª—è –≤—Å–µ—Ö –§–ü –≤—Ö–æ–¥–∞:", 0.05, 0.5, 0.15)
    
    fis_control, x_input = create_fis(sigma)
    fis_simulation = ctrl.ControlSystemSimulation(fis_control)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("1. –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–∞ 'x'")
        fig_mf, ax_mf = plt.subplots()
        for term_name, term_obj in x_input.terms.items():
            ax_mf.plot(x_input.universe, term_obj.mf, label=term_name)
        ax_mf.set_title(f"–§–ü –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏ sigma={sigma:.2f}")
        ax_mf.grid(True)
        ax_mf.legend()
        st.pyplot(fig_mf)

        st.subheader("2. –ü—Ä–∞–≤–∏–ª–∞ —Å–∏—Å—Ç–µ–º—ã")
        st.code("""
        1. IF (x IS bn) THEN (y IS 1.0)
        2. IF (x IS n)  THEN (y IS 0.36)
        3. IF (x IS z)  THEN (y IS 0.0)
        4. IF (x IS p)  THEN (y IS 0.16)
        5. IF (x IS pb) THEN (y IS 1.0)
        """, language="none")

    with col2:
        st.subheader("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–∞–Ω–∞–ª–æ–≥ Rule Viewer)")
        input_x = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'x':", -1.0, 1.0, -0.09, 0.01) # –£—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        fis_simulation.input['x'] = input_x
        fis_simulation.compute()
        output_y = fis_simulation.output['y']

        st.metric(label=f"–í—ã—Ö–æ–¥ 'y' –¥–ª—è x = {input_x}", value=f"{output_y:.4f}")

        # ======== –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª –≤—Ä—É—á–Ω—É—é
        fig_sim, ax_sim = plt.subplots()

        # –†–∏—Å—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
        for term_name, term_obj in x_input.terms.items():
            ax_sim.plot(x_input.universe, term_obj.mf, label=term_name)

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ö–æ–¥–∞
            activation_level = fuzz.interp_membership(x_input.universe, term_obj.mf, input_x)
            
            # –°–æ–∑–¥–∞–µ–º "—Å—Ä–µ–∑–∞–Ω–Ω—É—é" –≤–µ—Ä—Å–∏—é –§–ü –¥–ª—è –∑–∞–ª–∏–≤–∫–∏
            capped_mf = np.fmin(activation_level, term_obj.mf)
            ax_sim.fill_between(x_input.universe, 0, capped_mf, alpha=0.4)

        # –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
        ax_sim.axvline(x=input_x, color='k', linestyle='--', linewidth=2, label=f'–í—Ö–æ–¥ x={input_x:.2f}')
        
        ax_sim.set_title(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –§–ü –¥–ª—è x = {input_x:.2f}")
        ax_sim.grid(True)
        ax_sim.legend()
        st.pyplot(fig_sim)
        # ======== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ========


    st.subheader("4. –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏)")
    
    @st.cache_data
    def calculate_response_curve(_fis_control):
        x_values = np.linspace(-1, 1, 101)
        y_values = np.zeros_like(x_values)
        temp_sim = ctrl.ControlSystemSimulation(_fis_control)
        
        for i, x_val in enumerate(x_values):
            temp_sim.input['x'] = x_val
            temp_sim.compute()
            y_values[i] = temp_sim.output['y']
        return x_values, y_values

    x_vals, y_vals = calculate_response_curve(fis_control)
    y_ideal = x_vals**2

    fig_resp, ax_resp = plt.subplots(figsize=(10, 6))
    ax_resp.plot(x_vals, y_vals, 'b', linewidth=2, label='–í—ã—Ö–æ–¥ –Ω–µ—á–µ—Ç–∫–æ–π —Å–∏—Å—Ç–µ–º—ã')
    ax_resp.plot(x_vals, y_ideal, 'r--', linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è y = x^2')
    ax_resp.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ —Å –∏–¥–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π')
    ax_resp.set_xlabel('–í—Ö–æ–¥: x')
    ax_resp.set_ylabel('–í—ã—Ö–æ–¥: y')
    ax_resp.grid(True)
    ax_resp.legend()
    st.pyplot(fig_resp)
    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä `sigma` –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏.")